{
    "patches": [
        {
            "label": "2024-11-11_10-05-42",
            "content": "@@ -159,123 +159,85 @@\n Car(\n-)%7B       //construtor%0A        pass = 0;%0A        gas = 0;%0A        km = 0;%0A        passMax = 2;%0A        gasMax = 100;\n+int pass , int passMax , int gas , int gasMax , int km )%7B       //construtor%0A\n %0A   \n@@ -450,807 +450,85 @@\n ()%7B%0A\n-        if(pass %3E 0)%7B%0A            pass --;%0A        %7Delse%7B%0A            std::cout %3C%3C %22fail: nao ha ninguem no carro%22 %3C%3C std::endl;%0A        %7D%0A    %7D%0A%0A    void drive(int value)%7B%0A            km = km+value;%0A            gas = gas-value;%0A        if(pass == 0)%7B%0A            std::cout %3C%3C %22fail: nao ha ninguem no carro%22 %3C%3C std::endl;%0A        %7Delse if(gas == 0)%7B%0A            std::cout %3C%3C %22fail: tanque vazio%22 %3C%3C std::endl;%0A        %7Delse if(gas %3C value)%7B%0A            std::cout %3C%3C %22fail: tanque vazio ap%C3%B3s andar %22 %3C%3C gas %3C%3C %22km%22 %3C%3C std::endl;%0A            km += gas;%0A            gas = 0;%0A        %7Delse%7B%0A            km = km+value;%0A            gas = gas-value;%0A        %7D%0A    %7D%0A%0A    void fuel(int value)%7B%0A        if(gas+value == gasMax)%7B%0A            gas = gasMax;%0A        %7Delse%7B%0A            gas = gas+value;%0A        %7D\n+%0A    %7D%0A%0A    void drive(int value)%7B%0A%0A    %7D%0A%0A    void fuel(int value)%7B%0A        \n %0A   \n@@ -556,16 +556,27 @@\n oString(\n+std::string\n )%7B%0A     \n@@ -679,24 +679,27 @@\n tudent %7B%0A   \n+ //\n  Car car;%0A  \n@@ -737,24 +737,26 @@\n ) %7B%0A        \n+//\n  car.enter()\n@@ -786,24 +786,26 @@\n ) %7B%0A        \n+//\n  car.leave()\n@@ -839,24 +839,26 @@\n ) %7B%0A        \n+//\n  car.fuel(q)\n@@ -911,24 +911,26 @@\n ) %7B%0A        \n+//\n  car.drive(q\n@@ -986,22 +986,46 @@\n     \n-car.toString()\n+// std::cout %3C%3C car.str() %3C%3C std::endl\n ;%0A  \n"
        },
        {
            "label": "2024-11-11_11-58-37",
            "content": "@@ -1295,20 +1295,27 @@\n  %7D%0A%0A    \n-void\n+std::string\n  toStrin\n"
        },
        {
            "label": "2024-11-11_11-59-05",
            "content": "@@ -1339,17 +1339,16 @@\n %3C %22pass:\n- \n %22 %3C%3C pas\n@@ -1357,17 +1357,16 @@\n %3C%3C %22gas:\n- \n %22 %3C%3C gas\n@@ -1373,17 +1373,16 @@\n  %3C%3C %22km:\n- \n %22 %3C%3C km \n"
        },
        {
            "label": "2024-11-11_11-59-25",
            "content": "@@ -1354,17 +1354,16 @@\n ass %3C%3C %22\n- \n gas: %22 %3C\n@@ -1372,17 +1372,16 @@\n gas %3C%3C %22\n- \n km: %22 %3C%3C\n"
        },
        {
            "label": "2024-11-11_11-59-38",
            "content": "@@ -1354,17 +1354,16 @@\n ass %3C%3C %22\n-,\n  gas: %22 \n@@ -1373,17 +1373,16 @@\n gas %3C%3C %22\n-,\n  km: %22 %3C\n"
        },
        {
            "label": "2024-11-11_12-00-02",
            "content": "@@ -649,32 +649,88 @@\n ive(int value)%7B%0A\n+            km = km+value;%0A            gas = gas-value;%0A\n         if(pass \n"
        },
        {
            "label": "2024-11-11_12-01-33",
            "content": "@@ -917,17 +917,17 @@\n vazio ap\n-o\n+%C3%B3\n s andar \n"
        },
        {
            "label": "2024-11-11_12-01-51",
            "content": "@@ -939,17 +939,16 @@\n gas %3C%3C %22\n- \n km%22 %3C%3C s\n"
        },
        {
            "label": "2024-11-11_12-02-03",
            "content": "@@ -1137,17 +1137,17 @@\n s+value \n-%3E\n+=\n = gasMax\n"
        },
        {
            "label": "2024-11-11_12-02-45",
            "content": "#include \"fn.hpp\"\n\nclass Car{      //classe\n    public:     //atributos p\u00fablicos\n    int pass;\n    int passMax;\n    int gas;\n    int gasMax;\n    int km;\n\n    Car(){       //construtor\n        pass = 0;\n        gas = 0;\n        km = 0;\n        passMax = 2;\n        gasMax = 100;\n    }\n\n    void enter(){       //m\u00e9todos\n        if(pass == passMax){\n            std::cout << \"fail: limite de pessoas atingido\"<< std::endl;\n        }else{\n            pass++;\n        }\n    }\n\n    void leave(){\n        if(pass > 0){\n            pass --;\n        }else{\n            std::cout << \"fail: nao ha ninguem no carro\" << std::endl;\n        }\n    }\n\n    void drive(int value){\n        if(pass == 0){\n            std::cout << \"fail: nao ha ninguem no carro\" << std::endl;\n        }else if(gas == 0){\n            std::cout << \"fail: tanque vazio\" << std::endl;\n        }else if(gas < value){\n            std::cout << \"fail: tanque vazio apos andar \" << gas << \" km\" << std::endl;\n            km += gas;\n            gas = 0;\n        }else{\n            km = km+value;\n            gas = gas-value;\n        }\n    }\n\n    void fuel(int value){\n        if(gas+value >= gasMax){\n            gas = gasMax;\n        }else{\n            gas = gas+value;\n        }\n    }\n\n    void toString(){\n        std::cout << \"pass: \" << pass << \", gas: \" << gas << \", km: \" << km << std::endl;\n    }\n};\n\nstruct Student {\n    Car car;\n    Student() {}\n\n    void enter() {\n         car.enter();\n    }\n    void leave() {\n         car.leave();\n    }\n    void fuel(int q) {\n         car.fuel(q);\n        (void) q;\n    }\n    void drive(int q) {\n         car.drive(q);\n        (void) q;\n    }\n    void show() {\n        car.toString();\n    }\n};\n\nstruct Debug {\n    // Se a vari\u00e1vel debug for true, os testes n\u00e3o ser\u00e3o executados\n    // Apenas o conte\u00fado do m\u00e9todo run() ser\u00e1 executado\n    // Voc\u00ea pode usar isso para testar seu c\u00f3digo manualmente\n    static const bool debug = false;\n    static void run() {\n        std::cout << \"Debug ativado\" << std::endl;\n    }\n};\n"
        }
    ]
}